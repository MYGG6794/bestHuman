using System;
using System.Drawing;
using System.Windows.Forms;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using Microsoft.Web.WebView2.Core;
using Microsoft.Web.WebView2.WinForms;

namespace CoreApplication
{    public class DigitalHumanDisplay : Panel
    {
        private Color _chromaKeyColor = Color.Green; // 默认抠像颜色为绿色
        private int _tolerance = 30; // 默认颜色容差
        private bool _enableChromaKey = false; // 默认禁用抠像功能，避免影响性能
        private WebView2? _webView;
        private string? _streamUrl;        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public bool EnableChromaKey
        {
            get { return _enableChromaKey; }
            set { _enableChromaKey = value; }
        }

        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public Color ChromaKeyColor
        {
            get { return _chromaKeyColor; }
            set { _chromaKeyColor = value; Invalidate(); }
        }

        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public int Tolerance
        {
            get { return _tolerance; }
            set { _tolerance = value; Invalidate(); }
        }        public DigitalHumanDisplay()
        {
            DoubleBuffered = true; // 启用双缓冲，减少闪烁
            SetStyle(ControlStyles.SupportsTransparentBackColor | 
                    ControlStyles.AllPaintingInWmPaint | 
                    ControlStyles.UserPaint, true);
            
            // 关键修复：控件始终保持透明，不要设置绿色背景
            BackColor = Color.Transparent;
            
            InitializeWebView();
        }private async void InitializeWebView()
        {
            try
            {
                // 关键修复：初始化时保持控件背景透明，只在需要抠像时才设置绿色
                // this.BackColor保持构造函数中设置的Color.Transparent
                
                _webView = new WebView2
                {
                    Dock = DockStyle.Fill
                };
                
                // WebView2背景设为透明
                _webView.DefaultBackgroundColor = Color.Transparent;
                
                Controls.Add(_webView);
                await _webView.EnsureCoreWebView2Async();

                // WebView2配置
                var settings = _webView.CoreWebView2.Settings;
                settings.IsWebMessageEnabled = true;
                settings.AreDefaultContextMenusEnabled = false;
                settings.IsStatusBarEnabled = false;
                
                Logger.LogInfo("WebView2透明背景配置完成");
                Logger.LogInfo("WebView2 初始化完成");
            }
            catch (Exception ex)
            {
                Logger.LogError($"初始化WebView2失败: {ex.Message}", ex);
            }
        }public void SetStreamUrl(string url)
        {
            _streamUrl = url;
            Logger.LogInfo($"设置流URL: {url}");
            if (_webView?.CoreWebView2 != null)
            {
                try 
                {
                    _webView.CoreWebView2.Navigate(url);
                    Logger.LogInfo("成功导航到流URL");
                    
                    // 等待页面加载完成后启用调试
                    _webView.CoreWebView2.NavigationCompleted += async (sender, args) =>
                    {
                        if (args.IsSuccess)
                        {
                            Logger.LogInfo("页面导航完成，启用调试模式");
                            await Task.Delay(1000); // 等待页面稳定
                            await SetupWebView2DebuggingAsync();
                            
                            // 如果抠像已启用，重新应用
                            if (_enableChromaKey)
                            {
                                Logger.LogInfo("页面加载完成，重新应用抠像效果");
                                await Task.Delay(500);
                                InjectChromaKeyCSS(true);
                            }
                        }
                        else
                        {
                            Logger.LogError("页面导航失败");
                        }
                    };
                }
                catch (Exception ex)
                {
                    Logger.LogError($"导航到流URL失败: {ex.Message}", ex);
                }
            }
        }        public void SetChromaKeyEnabled(bool enabled)
        {
            _enableChromaKey = enabled;
            Logger.LogInfo($"抠像功能已{(enabled ? "启用" : "禁用")}");
            
            // 控件始终保持透明背景，不设置绿色
            // 抠像处理完全在WebView2的JavaScript中完成
            
            if (_webView?.CoreWebView2 != null)
            {
                // 注入抠像处理JavaScript
                InjectChromaKeyScript(enabled);
            }
            
            this.Invalidate();
        }        private async void InjectChromaKeyScript(bool enabled)
        {
            if (_webView?.CoreWebView2 == null) return;
            
            try
            {
                string script;
                if (enabled)
                {
                    // 注入真正的客户端抠像JavaScript
                    script = @"
                        (function() {
                            // 移除之前的抠像处理
                            const existingCanvas = document.getElementById('chroma-canvas');
                            if (existingCanvas) existingCanvas.remove();
                            
                            const existingStyle = document.getElementById('chroma-style');
                            if (existingStyle) existingStyle.remove();
                            
                            // 查找视频元素
                            const video = document.querySelector('video');
                            if (!video) {
                                console.log('未找到视频元素，无法进行抠像处理');
                                return;
                            }
                            
                            // 创建Canvas用于抠像处理
                            const canvas = document.createElement('canvas');
                            canvas.id = 'chroma-canvas';
                            canvas.style.position = 'absolute';
                            canvas.style.top = '0';
                            canvas.style.left = '0';
                            canvas.style.width = '100%';
                            canvas.style.height = '100%';
                            canvas.style.zIndex = '999';
                            canvas.style.pointerEvents = 'none';
                            
                            const ctx = canvas.getContext('2d');
                            document.body.appendChild(canvas);
                            
                            // 隐藏原始视频
                            video.style.opacity = '0';
                            
                            // 抠像处理函数
                            function processChromaKey() {
                                canvas.width = video.videoWidth || video.offsetWidth;
                                canvas.height = video.videoHeight || video.offsetHeight;
                                
                                if (video.videoWidth === 0 || video.videoHeight === 0) return;
                                
                                // 绘制视频帧到Canvas
                                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                                
                                // 获取像素数据
                                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                                const data = imageData.data;
                                
                                // 抠像处理：将绿色像素设为透明
                                for (let i = 0; i < data.length; i += 4) {
                                    const r = data[i];
                                    const g = data[i + 1];
                                    const b = data[i + 2];
                                    
                                    // 检测绿色（容差范围内）
                                    if (g > 100 && g > r + 50 && g > b + 50) {
                                        data[i + 3] = 0; // 设为透明
                                    }
                                }
                                
                                // 将处理后的数据绘制回Canvas
                                ctx.putImageData(imageData, 0, 0);
                                
                                // 继续处理下一帧
                                requestAnimationFrame(processChromaKey);
                            }
                            
                            // 等待视频加载后开始处理
                            video.addEventListener('loadeddata', function() {
                                console.log('视频加载完成，开始抠像处理');
                                processChromaKey();
                            });
                            
                            // 如果视频已经加载，立即开始
                            if (video.readyState >= 2) {
                                processChromaKey();
                            }
                            
                            console.log('抠像脚本已注入');
                        })();
                    ";
                }
                else
                {
                    // 禁用抠像：移除Canvas，显示原始视频
                    script = @"
                        (function() {
                            const canvas = document.getElementById('chroma-canvas');
                            if (canvas) canvas.remove();
                            
                            const video = document.querySelector('video');
                            if (video) {
                                video.style.opacity = '1';
                            }
                            
                            console.log('抠像处理已禁用');
                        })();
                    ";
                }
                
                await _webView.CoreWebView2.ExecuteScriptAsync(script);
                Logger.LogInfo($"抠像脚本: {(enabled ? "启用" : "禁用")} - JavaScript处理完成");
            }
            catch (Exception ex)
            {
                Logger.LogError($"注入抠像脚本失败: {ex.Message}", ex);
            }
        }
        {
            if (_webView?.CoreWebView2 == null) return;
            
            try
            {
                string script;
                if (enabled)
                {
                    // 启用抠像：注入CSS使页面背景透明，露出控件的绿色背景，再通过主窗口透明键实现穿透
                    script = @"
                        (function() {
                            const existingStyle = document.getElementById('transparency-style');
                            if (existingStyle) existingStyle.remove();
                            
                            const style = document.createElement('style');
                            style.id = 'transparency-style';
                            style.textContent = `
                                /* 抠像模式：页面背景透明，露出控件绿色背景 */
                                html, body {
                                    background: transparent !important;
                                    background-color: transparent !important;
                                }
                                
                                /* 让页面容器背景透明，但保留视频内容 */
                                div, section, article {
                                    background: transparent !important;
                                    background-color: transparent !important;
                                }
                                
                                /* 视频容器背景透明 */
                                video {
                                    background: transparent !important;
                                }
                            `;
                            document.head.appendChild(style);
                            console.log('抠像透明CSS已注入');
                        })();
                    ";
                }
                else
                {
                    // 禁用抠像：移除透明CSS，恢复正常显示
                    script = @"
                        (function() {
                            const existingStyle = document.getElementById('transparency-style');
                            if (existingStyle) {
                                existingStyle.remove();
                                console.log('透明CSS已移除，恢复正常显示');
                            }
                        })();
                    ";
                }
                
                await _webView.CoreWebView2.ExecuteScriptAsync(script);
                Logger.LogInfo($"抠像状态: {(enabled ? "启用" : "禁用")} - CSS处理完成");
            }
            catch (Exception ex)
            {
                Logger.LogError($"注入透明CSS失败: {ex.Message}", ex);
            }
        }

        private async void InjectChromaKeyCSS(bool enabled)
        {
            if (_webView?.CoreWebView2 == null) return;
            
            try
            {
                string script;
                if (enabled)
                {                    // 注入抠像 CSS 和 JavaScript
                    script = $@"
                        (function() {{
                            // 移除之前的样式
                            const existingStyle = document.getElementById('chromakey-style');
                            if (existingStyle) existingStyle.remove();
                            
                            // 创建新的样式
                            const style = document.createElement('style');
                            style.id = 'chromakey-style';                            style.textContent = `
                                /* 针对绿色背景的CSS滤镜处理 */
                                html, body {{
                                    background: transparent !important;
                                    background-color: transparent !important;
                                }}
                                
                                /* 尝试使用CSS滤镜进行绿色替换 */
                                video, canvas {{
                                    /* 保留原始显示，只对背景进行处理 */
                                    background: transparent !important;
                                    
                                    /* 实验性CSS绿幕滤镜 - 仅对绿色区域生效 */
                                    filter: 
                                        hue-rotate(0deg)
                                        contrast(1.1)
                                        brightness(1.0)
                                        saturate(0.9);
                                        
                                    /* 尝试CSS遮罩来隐藏绿色背景 */
                                    -webkit-mask-image: 
                                        radial-gradient(circle, 
                                            rgba(0,0,0,1) 0%, 
                                            rgba(0,0,0,1) 70%, 
                                            rgba(0,0,0,0.8) 100%);
                                }}
                                
                                /* 特定针对绿色背景元素 */
                                *[style*='background-color: rgb(0, 255, 0)'],
                                *[style*='background-color: rgb(0,255,0)'],
                                *[style*='background-color: #00ff00'],
                                *[style*='background-color: #0f0'],
                                *[style*='background-color: green'],
                                *[style*='background: green'],
                                *[style*='background: #00ff00'],
                                div[style*='background'],
                                .green-background {{
                                    background: transparent !important;
                                    background-color: transparent !important;
                                }}
                                
                                /* 保护数字人角色不被过度处理 */
                                video {{
                                    /* 保持视频内容原样，只处理容器背景 */
                                    object-fit: contain;
                                }}
                            `;
                            document.head.appendChild(style);
                            
                            // 添加类名以启用高级效果
                            document.body.classList.add('chromakey-enabled');
                            
                            // 尝试更强力的JavaScript处理
                            function processVideoElements() {{
                                const videos = document.querySelectorAll('video, canvas');
                                videos.forEach(video => {{
                                    if (video.tagName === 'VIDEO') {{
                                        // 对于video元素，尝试canvas处理
                                        video.addEventListener('loadeddata', function() {{
                                            console.log('视频加载完成，尝试应用抠像效果');
                                        }});
                                    }}
                                    
                                    // 设置透明背景
                                    video.style.background = 'transparent';
                                    video.style.backgroundColor = 'transparent';
                                }});
                            }}
                            
                            // 立即处理现有元素
                            processVideoElements();
                            
                            // 监听新添加的元素
                            const observer = new MutationObserver(function(mutations) {{
                                mutations.forEach(function(mutation) {{
                                    if (mutation.addedNodes.length > 0) {{
                                        processVideoElements();
                                    }}
                                }});
                            }});
                            
                            observer.observe(document.body, {{
                                childList: true,
                                subtree: true
                            }});
                            
                            console.log('ChromaKey CSS和JS处理已注入');                            // 临时禁用Canvas绿幕处理，避免影响视频播放
                            function setupCanvasChromaKey() {{
                                console.log('Canvas绿幕处理已暂时禁用，保持视频流畅播放');
                                
                                // 仅使用CSS方法进行基础透明处理
                                console.log('应用CSS透明处理');
                                
                                // 检测视频元素但不替换
                                const videos = document.querySelectorAll('video');
                                const canvases = document.querySelectorAll('canvas');
                                
                                console.log('找到元素:', {{videos: videos.length, canvases: canvases.length}});
                                
                                // 只对背景元素应用透明，不影响视频内容
                                videos.forEach((video, index) => {{
                                    console.log('为video元素', index, '设置透明背景');
                                    video.style.backgroundColor = 'transparent';
                                }});
                                
                                canvases.forEach((canvas, index) => {{
                                    console.log('为canvas元素', index, '设置透明背景');
                                    canvas.style.backgroundColor = 'transparent';
                                }});
                            }}
                            
                            // 等待页面加载完成后设置Canvas处理
                            if (document.readyState === 'loading') {{
                                document.addEventListener('DOMContentLoaded', setupCanvasChromaKey);
                            }} else {{
                                setTimeout(setupCanvasChromaKey, 100);
                            }}
                        }})();
                    ";
                }
                else
                {                    // 移除抠像效果
                    script = @"
                        (function() {
                            const existingStyle = document.getElementById('chromakey-style');
                            if (existingStyle) {
                                existingStyle.remove();
                                console.log('ChromaKey CSS 已移除');
                            }
                            
                            // 移除类名
                            document.body.classList.remove('chromakey-enabled');
                        })();
                    ";
                }
                
                await _webView.CoreWebView2.ExecuteScriptAsync(script);
                Logger.LogInfo($"已{(enabled ? "注入" : "移除")}抠像CSS");
            }
            catch (Exception ex)
            {
                Logger.LogError($"注入抠像CSS失败: {ex.Message}", ex);            }
        }        private async Task SetupWebView2DebuggingAsync()
        {
            if (_webView?.CoreWebView2 == null) return;
            
            try
            {
                // 注入调试脚本
                string debugScript = @"
                    console.log('WebView2调试模式已启用');
                    console.log('当前页面URL:', window.location.href);
                    console.log('页面元素统计:', {
                        videos: document.querySelectorAll('video').length,
                        canvases: document.querySelectorAll('canvas').length,
                        images: document.querySelectorAll('img').length
                    });
                    
                    // 监听页面变化
                    new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            if (mutation.addedNodes.length > 0) {
                                console.log('页面内容发生变化，重新统计元素');
                                console.log('元素统计:', {
                                    videos: document.querySelectorAll('video').length,
                                    canvases: document.querySelectorAll('canvas').length,
                                    images: document.querySelectorAll('img').length
                                });
                            }
                        });
                    }).observe(document.body, { childList: true, subtree: true });
                ";
                
                await _webView.CoreWebView2.ExecuteScriptAsync(debugScript);
                Logger.LogInfo("WebView2调试脚本已注入");
            }
            catch (Exception ex)
            {
                Logger.LogError($"设置WebView2调试失败: {ex.Message}", ex);
            }
        }

        // 模拟接收像素流数据并渲染（保留用于向后兼容）
        public void SetPixelStream(Bitmap pixelData)
        {
            if (pixelData == null) return;

            // 如果启用抠像，则进行处理
            if (_enableChromaKey)
            {
                var processedBitmap = ApplyChromaKey(pixelData);
                // 由于改为Panel，这里可以通过背景图片或Paint事件显示
                this.BackgroundImage?.Dispose();
                this.BackgroundImage = processedBitmap;
            }
            else
            {
                this.BackgroundImage?.Dispose();
                this.BackgroundImage = pixelData;
            }
        }

        private Bitmap ApplyChromaKey(Bitmap originalBitmap)
        {
            Bitmap processedBitmap = new Bitmap(originalBitmap.Width, originalBitmap.Height, PixelFormat.Format32bppArgb);

            BitmapData originalData = originalBitmap.LockBits(
                new Rectangle(0, 0, originalBitmap.Width, originalBitmap.Height),
                ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);

            BitmapData processedData = processedBitmap.LockBits(
                new Rectangle(0, 0, processedBitmap.Width, processedBitmap.Height),
                ImageLockMode.WriteOnly, PixelFormat.Format32bppArgb);

            int byteCount = originalData.Stride * originalData.Height;
            byte[] originalPixels = new byte[byteCount];
            byte[] processedPixels = new byte[byteCount];

            Marshal.Copy(originalData.Scan0, originalPixels, 0, byteCount);

            int chromaR = _chromaKeyColor.R;
            int chromaG = _chromaKeyColor.G;
            int chromaB = _chromaKeyColor.B;

            for (int i = 0; i < byteCount; i += 4)
            {
                byte b = originalPixels[i];
                byte g = originalPixels[i + 1];
                byte r = originalPixels[i + 2];
                byte a = originalPixels[i + 3]; // Original alpha

                // 计算颜色差异
                int diffR = Math.Abs(r - chromaR);
                int diffG = Math.Abs(g - chromaG);
                int diffB = Math.Abs(b - chromaB);

                // 如果颜色在容差范围内，则设置为透明
                if (diffR <= _tolerance && diffG <= _tolerance && diffB <= _tolerance)
                {
                    processedPixels[i] = 0;     // B
                    processedPixels[i + 1] = 0; // G
                    processedPixels[i + 2] = 0; // R
                    processedPixels[i + 3] = 0; // A (完全透明)
                }
                else
                {
                    processedPixels[i] = b;
                    processedPixels[i + 1] = g;
                    processedPixels[i + 2] = r;
                    processedPixels[i + 3] = a; // Keep original alpha
                }
            }

            Marshal.Copy(processedPixels, 0, processedData.Scan0, byteCount);

            originalBitmap.UnlockBits(originalData);
            processedBitmap.UnlockBits(processedData);

            return processedBitmap;
        }

        // 窗口置顶、点击穿透等功能将通过P/Invoke调用Windows API实现
        // 这些功能通常在主窗口级别进行控制，而不是在PictureBox控件级别
        // 因此，这些方法将作为MainForm的扩展方法或在MainForm中直接实现
    }
}